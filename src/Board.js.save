import React, {Component} from "react";
OOOBBOimport Cell from "./Cell";
import './BoarOOOAOOOAAOOOBBcss';
OOBOBBOOBBOBBB

/** Game board of Lights out.
 *
 * Properties:
 *
 * - nrows: number of rows of board
 * - ncols: number of cols of board
 * - chanceLightStartsOn: float, chance any cell is lit at start of game
 *
 * State:
 *
 * - hasWon: boolean, true when board is all off
 * - board: array-of-arrays of true/false
 *
 *    For this board:
 *       .  .  .
 *       O  O  .     (where . is off, and O is on)
 *       .  .  .
 *
 *    This would be: [[f, f, f], [t, t, f], [f, f, f]]
 *
 *  This should render an HTML table of individual <Cell /> components.
 *
 *  This doesn't handle any clicks --- clicks are on individual cells
 *
 **/

class Board extends Component {

  static defaultProps = {
    nrows: 5,
    ncols: 5,
    chanceLightStartsOn: 0.25,
  }

  constructor(props) {
    super(props);

    // set initial state
    this.state = {
      hasWon: false,
      board: this.createBoard(),
    }
  }

  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */

  createBoard() {
    let board = [];
    
    // create array-of-arrays of true/false values
    for(let r=0; r < this.props.nrows; r++){
      board[r] = [];
      for(let c=0; c < this.props.ncols; c++){
          board[r].push(false);
      }
    }
    for(let r=0; r < this.props.nrows; r++){
      for(let c=0; c < this.props.ncols; c++){
        if(Math.random() < this.props.chanceLightStartsOn){
          this.flipCellsAround(board, `${r}-${c}`)
        }
      }
    }
    return board;
  }

  /** handle changing a cell: update board & determine if winner */

  flipCellsAround(board, coord) {
    let {ncols, nrows} = this.props;
    let [y, x] = coord.split("-").map(Number);


    function flipCell(y, x) {
      // if this coord is actually on board, flip it

      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {
        board[y][x] = !board[y][x];
      }
    }

    // flip this cell and the cells around it
    flipCell(y, x);
    (y - 1 > -1) && flipCell(y - 1, x);
    (y + 1 < nrows) && flipCell(y + 1, x);
    (x - 1 > -1) && flipCell(y, x - 1);
    (x + 1 < ncols) && flipCell(y, x + 1);
    
    // win when every cell is turned off
    // determine if the game has been won
    this.checkForWin(board);

    this.setState({board});
  }

  handleClick(coord) {

    let newBoard = this.flipCellsAround(this.state.board, coord);

    this.checkForWin(newBoard);

    this.setState({board: newBoard});
  }

  checkForWin(board) {
    for(let r=0; r < this.props.nrows; r++){
      for(let c=0; c < this.props.ncols; c++){
        if(board[r][c] === true){
          return false;
        }
      }
    }
    this.setState({hasWon: true});
  }

  /** Render game board or winning message. */

  render() {
    return(
      <div>
        { this.state.hasWon &&  <p>You win!</p> }
        { !this.state.hasWon &&  
          <table><tbody>{ this.state.board.map( (row, rIdx) => {
            return<tr>{row.map( (cell, cIdx) => {
                return<Cell 
                    key={`${rIdx}-${cIdx}`} 
                    isLit={ cell } 
                    flipCellsAroundMe={ () => this.handleClick(`${rIdx}-${cIdx}`)} 
                  />
            })}
            </tr>
          }) 
        }</tbody></table>
        } 
      </div>
    );
  }
}


export default Board;
